from typing import Dict, Optional, Tuple

import gym
import numpy as np
import pygame
from gym import spaces
from pygame import gfxdraw

BLACK = (0, 0, 0)
WHITE = (255, 255, 255)
RED = (255, 0, 0, 150)
YELLOW = (255, 255, 0, 255)


def get_intersect(A: np.ndarray, B: np.ndarray, C: np.ndarray, D: np.ndarray) -> Optional[np.ndarray]:
    """
    Get the intersection of [A, B] and [C, D]. Return False if segment don't cross.

    :param A: Point of the first segment
    :param B: Point of the first segment
    :param C: Point of the second segment
    :param D: Point of the second segment
    :return: The intersection if any, otherwise None.
    """
    det = (B[0] - A[0]) * (C[1] - D[1]) - (C[0] - D[0]) * (B[1] - A[1])
    if det == 0:
        # Parallel
        return None
    else:
        t1 = ((C[0] - A[0]) * (C[1] - D[1]) - (C[0] - D[0]) * (C[1] - A[1])) / det
        t2 = ((B[0] - A[0]) * (C[1] - A[1]) - (C[0] - A[0]) * (B[1] - A[1])) / det
        if t1 > 1 or t1 < 0 or t2 > 1 or t2 < 0:
            # not intersect
            return None
        else:
            xi = A[0] + t1 * (B[0] - A[0])
            yi = A[1] + t1 * (B[1] - A[1])
            return np.array([xi, yi])


class ContinuousMaze(gym.Env):
    """Continuous maze environment."""

    action_space = spaces.Box(-1, 1, (2,))
    observation_space = spaces.Box(0, 24, (2,))

    walls = np.array(
        [[[-11.600000000000001, -7.6000000000000005], [11.399999999999999, -7.6000000000000005]], [[-11.600000000000001, -6.6000000000000005], [-11.600000000000001, -6.6000000000000005]], [[-2.6000000000000014, -6.6000000000000005], [-2.6000000000000014, -6.6000000000000005]], [[11.399999999999999, -6.6000000000000005], [11.399999999999999, -6.6000000000000005]], [[-11.600000000000001, -5.6000000000000005], [-11.600000000000001, -5.6000000000000005]], [[-7.600000000000001, -5.6000000000000005], [-6.600000000000001, -5.6000000000000005]], [[-2.6000000000000014, -5.6000000000000005], [-1.6000000000000014, -5.6000000000000005]], [[2.3999999999999986, -5.6000000000000005], [4.399999999999999, -5.6000000000000005]], [[7.399999999999999, -5.6000000000000005], [8.399999999999999, -5.6000000000000005]], [[11.399999999999999, -5.6000000000000005], [11.399999999999999, -5.6000000000000005]], [[-11.600000000000001, -4.6000000000000005], [-11.600000000000001, -4.6000000000000005]], [[7.399999999999999, -4.6000000000000005], [7.399999999999999, -4.6000000000000005]], [[11.399999999999999, -4.6000000000000005], [11.399999999999999, -4.6000000000000005]], [[-11.600000000000001, -3.6000000000000005], [-11.600000000000001, -3.6000000000000005]], [[-7.600000000000001, -3.6000000000000005], [-4.600000000000001, -3.6000000000000005]], [[2.3999999999999986, -3.6000000000000005], [8.399999999999999, -3.6000000000000005]], [[11.399999999999999, -3.6000000000000005], [11.399999999999999, -3.6000000000000005]], [[-11.600000000000001, -2.6000000000000005], [-11.600000000000001, -2.6000000000000005]], [[-4.600000000000001, -2.6000000000000005], [-4.600000000000001, -2.6000000000000005]], [[-0.6000000000000014, -2.6000000000000005], [-0.6000000000000014, -2.6000000000000005]], [[1.3999999999999986, -2.6000000000000005], [2.3999999999999986, -2.6000000000000005]], [[8.399999999999999, -2.6000000000000005], [8.399999999999999, -2.6000000000000005]], [[11.399999999999999, -2.6000000000000005], [11.399999999999999, -2.6000000000000005]], [[-11.600000000000001, -1.6000000000000005], [-8.600000000000001, -1.6000000000000005]], [[-4.600000000000001, -1.6000000000000005], [-4.600000000000001, -1.6000000000000005]], [[-1.6000000000000014, -1.6000000000000005], [-0.6000000000000014, -1.6000000000000005]], [[2.3999999999999986, -1.6000000000000005], [2.3999999999999986, -1.6000000000000005]], [[6.399999999999999, -1.6000000000000005], [11.399999999999999, -1.6000000000000005]], [[-11.600000000000001, -0.6000000000000005], [-11.600000000000001, -0.6000000000000005]], [[-4.600000000000001, -0.6000000000000005], [-4.600000000000001, -0.6000000000000005]], [[-0.6000000000000014, -0.6000000000000005], [-0.6000000000000014, -0.6000000000000005]], [[11.399999999999999, -0.6000000000000005], [11.399999999999999, -0.6000000000000005]], [[-11.600000000000001, 0.39999999999999947], [-11.600000000000001, 0.39999999999999947]], [[-4.600000000000001, 0.39999999999999947], [-2.6000000000000014, 0.39999999999999947]], [[-0.6000000000000014, 0.39999999999999947], [-0.6000000000000014, 0.39999999999999947]], [[11.399999999999999, 0.39999999999999947], [11.399999999999999, 0.39999999999999947]], [[-11.600000000000001, 1.3999999999999995], [-8.600000000000001, 1.3999999999999995]], [[-4.600000000000001, 1.3999999999999995], [-4.600000000000001, 1.3999999999999995]], [[-1.6000000000000014, 1.3999999999999995], [-0.6000000000000014, 1.3999999999999995]], [[2.3999999999999986, 1.3999999999999995], [2.3999999999999986, 1.3999999999999995]], [[6.399999999999999, 1.3999999999999995], [11.399999999999999, 1.3999999999999995]], [[-11.600000000000001, 2.3999999999999995], [-11.600000000000001, 2.3999999999999995]], [[-4.600000000000001, 2.3999999999999995], [-4.600000000000001, 2.3999999999999995]], [[-0.6000000000000014, 2.3999999999999995], [-0.6000000000000014, 2.3999999999999995]], [[1.3999999999999986, 2.3999999999999995], [2.3999999999999986, 2.3999999999999995]], [[8.399999999999999, 2.3999999999999995], [8.399999999999999, 2.3999999999999995]], [[11.399999999999999, 2.3999999999999995], [11.399999999999999, 2.3999999999999995]], [[-11.600000000000001, 3.3999999999999995], [-11.600000000000001, 3.3999999999999995]], [[-7.600000000000001, 3.3999999999999995], [-4.600000000000001, 3.3999999999999995]], [[-0.6000000000000014, 3.3999999999999995], [-0.6000000000000014, 3.3999999999999995]], [[2.3999999999999986, 3.3999999999999995], [8.399999999999999, 3.3999999999999995]], [[11.399999999999999, 3.3999999999999995], [11.399999999999999, 3.3999999999999995]], [[-11.600000000000001, 4.3999999999999995], [-11.600000000000001, 4.3999999999999995]], [[7.399999999999999, 4.3999999999999995], [7.399999999999999, 4.3999999999999995]], [[11.399999999999999, 4.3999999999999995], [11.399999999999999, 4.3999999999999995]], [[-11.600000000000001, 5.3999999999999995], [-11.600000000000001, 5.3999999999999995]], [[-7.600000000000001, 5.3999999999999995], [-6.600000000000001, 5.3999999999999995]], [[-2.6000000000000014, 5.3999999999999995], [-2.6000000000000014, 5.3999999999999995]], [[2.3999999999999986, 5.3999999999999995], [7.399999999999999, 5.3999999999999995]], [[11.399999999999999, 5.3999999999999995], [11.399999999999999, 5.3999999999999995]], [[-11.600000000000001, 6.3999999999999995], [-11.600000000000001, 6.3999999999999995]], [[-2.6000000000000014, 6.3999999999999995], [-2.6000000000000014, 6.3999999999999995]], [[11.399999999999999, 6.3999999999999995], [11.399999999999999, 6.3999999999999995]], [[-11.600000000000001, 7.3999999999999995], [11.399999999999999, 7.3999999999999995]], [[-11.600000000000001, -7.6000000000000005], [-11.600000000000001, 7.3999999999999995]], [[-10.600000000000001, -7.6000000000000005], [-10.600000000000001, -7.6000000000000005]], [[-10.600000000000001, -1.6000000000000005], [-10.600000000000001, -1.6000000000000005]], [[-10.600000000000001, 1.3999999999999995], [-10.600000000000001, 1.3999999999999995]], [[-10.600000000000001, 7.3999999999999995], [-10.600000000000001, 7.3999999999999995]], [[-9.600000000000001, -7.6000000000000005], [-9.600000000000001, -7.6000000000000005]], [[-9.600000000000001, -1.6000000000000005], [-9.600000000000001, -1.6000000000000005]], [[-9.600000000000001, 1.3999999999999995], [-9.600000000000001, 1.3999999999999995]], [[-9.600000000000001, 7.3999999999999995], [-9.600000000000001, 7.3999999999999995]], [[-8.600000000000001, -7.6000000000000005], [-8.600000000000001, -7.6000000000000005]], [[-8.600000000000001, -1.6000000000000005], [-8.600000000000001, -1.6000000000000005]], [[-8.600000000000001, 1.3999999999999995], [-8.600000000000001, 1.3999999999999995]], [[-8.600000000000001, 7.3999999999999995], [-8.600000000000001, 7.3999999999999995]], [[-7.600000000000001, -7.6000000000000005], [-7.600000000000001, -7.6000000000000005]], [[-7.600000000000001, -5.6000000000000005], [-7.600000000000001, -5.6000000000000005]], [[-7.600000000000001, -3.6000000000000005], [-7.600000000000001, -3.6000000000000005]], [[-7.600000000000001, 3.3999999999999995], [-7.600000000000001, 3.3999999999999995]], [[-7.600000000000001, 5.3999999999999995], [-7.600000000000001, 5.3999999999999995]], [[-7.600000000000001, 7.3999999999999995], [-7.600000000000001, 7.3999999999999995]], [[-6.600000000000001, -7.6000000000000005], [-6.600000000000001, -7.6000000000000005]], [[-6.600000000000001, -5.6000000000000005], [-6.600000000000001, -5.6000000000000005]], [[-6.600000000000001, -3.6000000000000005], [-6.600000000000001, -3.6000000000000005]], [[-6.600000000000001, 3.3999999999999995], [-6.600000000000001, 3.3999999999999995]], [[-6.600000000000001, 5.3999999999999995], [-6.600000000000001, 5.3999999999999995]], [[-6.600000000000001, 7.3999999999999995], [-6.600000000000001, 7.3999999999999995]], [[-5.600000000000001, -7.6000000000000005], [-5.600000000000001, -7.6000000000000005]], [[-5.600000000000001, -3.6000000000000005], [-5.600000000000001, -3.6000000000000005]], [[-5.600000000000001, 3.3999999999999995], [-5.600000000000001, 3.3999999999999995]], [[-5.600000000000001, 7.3999999999999995], [-5.600000000000001, 7.3999999999999995]], [[-4.600000000000001, -7.6000000000000005], [-4.600000000000001, -7.6000000000000005]], [[-4.600000000000001, -3.6000000000000005], [-4.600000000000001, 3.3999999999999995]], [[-4.600000000000001, 7.3999999999999995], [-4.600000000000001, 7.3999999999999995]], [[-3.6000000000000014, -7.6000000000000005], [-3.6000000000000014, -7.6000000000000005]], [[-3.6000000000000014, 0.39999999999999947], [-3.6000000000000014, 0.39999999999999947]], [[-3.6000000000000014, 7.3999999999999995], [-3.6000000000000014, 7.3999999999999995]], [[-2.6000000000000014, -7.6000000000000005], [-2.6000000000000014, -5.6000000000000005]], [[-2.6000000000000014, 0.39999999999999947], [-2.6000000000000014, 0.39999999999999947]], [[-2.6000000000000014, 5.3999999999999995], [-2.6000000000000014, 7.3999999999999995]], [[-1.6000000000000014, -7.6000000000000005], [-1.6000000000000014, -7.6000000000000005]], [[-1.6000000000000014, -5.6000000000000005], [-1.6000000000000014, -5.6000000000000005]], [[-1.6000000000000014, -1.6000000000000005], [-1.6000000000000014, -1.6000000000000005]], [[-1.6000000000000014, 1.3999999999999995], [-1.6000000000000014, 1.3999999999999995]], [[-1.6000000000000014, 7.3999999999999995], [-1.6000000000000014, 7.3999999999999995]], [[-0.6000000000000014, -7.6000000000000005], [-0.6000000000000014, -7.6000000000000005]], [[-0.6000000000000014, -2.6000000000000005], [-0.6000000000000014, 3.3999999999999995]], [[-0.6000000000000014, 7.3999999999999995], [-0.6000000000000014, 7.3999999999999995]], [[0.3999999999999986, -7.6000000000000005], [0.3999999999999986, -7.6000000000000005]], [[0.3999999999999986, 7.3999999999999995], [0.3999999999999986, 7.3999999999999995]], [[1.3999999999999986, -7.6000000000000005], [1.3999999999999986, -7.6000000000000005]], [[1.3999999999999986, -2.6000000000000005], [1.3999999999999986, -2.6000000000000005]], [[1.3999999999999986, 2.3999999999999995], [1.3999999999999986, 2.3999999999999995]], [[1.3999999999999986, 7.3999999999999995], [1.3999999999999986, 7.3999999999999995]], [[2.3999999999999986, -7.6000000000000005], [2.3999999999999986, -7.6000000000000005]], [[2.3999999999999986, -5.6000000000000005], [2.3999999999999986, -5.6000000000000005]], [[2.3999999999999986, -3.6000000000000005], [2.3999999999999986, -1.6000000000000005]], [[2.3999999999999986, 1.3999999999999995], [2.3999999999999986, 3.3999999999999995]], [[2.3999999999999986, 5.3999999999999995], [2.3999999999999986, 5.3999999999999995]], [[2.3999999999999986, 7.3999999999999995], [2.3999999999999986, 7.3999999999999995]], [[3.3999999999999986, -7.6000000000000005], [3.3999999999999986, -7.6000000000000005]], [[3.3999999999999986, -5.6000000000000005], [3.3999999999999986, -5.6000000000000005]], [[3.3999999999999986, -3.6000000000000005], [3.3999999999999986, -3.6000000000000005]], [[3.3999999999999986, 3.3999999999999995], [3.3999999999999986, 3.3999999999999995]], [[3.3999999999999986, 5.3999999999999995], [3.3999999999999986, 5.3999999999999995]], [[3.3999999999999986, 7.3999999999999995], [3.3999999999999986, 7.3999999999999995]], [[4.399999999999999, -7.6000000000000005], [4.399999999999999, -7.6000000000000005]], [[4.399999999999999, -5.6000000000000005], [4.399999999999999, -5.6000000000000005]], [[4.399999999999999, -3.6000000000000005], [4.399999999999999, -3.6000000000000005]], [[4.399999999999999, 3.3999999999999995], [4.399999999999999, 3.3999999999999995]], [[4.399999999999999, 5.3999999999999995], [4.399999999999999, 5.3999999999999995]], [[4.399999999999999, 7.3999999999999995], [4.399999999999999, 7.3999999999999995]], [[5.399999999999999, -7.6000000000000005], [5.399999999999999, -7.6000000000000005]], [[5.399999999999999, -3.6000000000000005], [5.399999999999999, -3.6000000000000005]], [[5.399999999999999, 3.3999999999999995], [5.399999999999999, 3.3999999999999995]], [[5.399999999999999, 5.3999999999999995], [5.399999999999999, 5.3999999999999995]], [[5.399999999999999, 7.3999999999999995], [5.399999999999999, 7.3999999999999995]], [[6.399999999999999, -7.6000000000000005], [6.399999999999999, -7.6000000000000005]], [[6.399999999999999, -3.6000000000000005], [6.399999999999999, -3.6000000000000005]], [[6.399999999999999, -1.6000000000000005], [6.399999999999999, -1.6000000000000005]], [[6.399999999999999, 1.3999999999999995], [6.399999999999999, 1.3999999999999995]], [[6.399999999999999, 3.3999999999999995], [6.399999999999999, 3.3999999999999995]], [[6.399999999999999, 5.3999999999999995], [6.399999999999999, 5.3999999999999995]], [[6.399999999999999, 7.3999999999999995], [6.399999999999999, 7.3999999999999995]], [[7.399999999999999, -7.6000000000000005], [7.399999999999999, -7.6000000000000005]], [[7.399999999999999, -5.6000000000000005], [7.399999999999999, -3.6000000000000005]], [[7.399999999999999, -1.6000000000000005], [7.399999999999999, -1.6000000000000005]], [[7.399999999999999, 1.3999999999999995], [7.399999999999999, 1.3999999999999995]], [[7.399999999999999, 3.3999999999999995], [7.399999999999999, 5.3999999999999995]], [[7.399999999999999, 7.3999999999999995], [7.399999999999999, 7.3999999999999995]], [[8.399999999999999, -7.6000000000000005], [8.399999999999999, -7.6000000000000005]], [[8.399999999999999, -5.6000000000000005], [8.399999999999999, -5.6000000000000005]], [[8.399999999999999, -3.6000000000000005], [8.399999999999999, -1.6000000000000005]], [[8.399999999999999, 1.3999999999999995], [8.399999999999999, 3.3999999999999995]], [[8.399999999999999, 7.3999999999999995], [8.399999999999999, 7.3999999999999995]], [[9.399999999999999, -7.6000000000000005], [9.399999999999999, -7.6000000000000005]], [[9.399999999999999, -1.6000000000000005], [9.399999999999999, -1.6000000000000005]], [[9.399999999999999, 1.3999999999999995], [9.399999999999999, 1.3999999999999995]], [[9.399999999999999, 7.3999999999999995], [9.399999999999999, 7.3999999999999995]], [[10.399999999999999, -7.6000000000000005], [10.399999999999999, -7.6000000000000005]], [[10.399999999999999, -1.6000000000000005], [10.399999999999999, -1.6000000000000005]], [[10.399999999999999, 1.3999999999999995], [10.399999999999999, 1.3999999999999995]], [[10.399999999999999, 7.3999999999999995], [10.399999999999999, 7.3999999999999995]], [[11.399999999999999, -7.6000000000000005], [11.399999999999999, 7.3999999999999995]]]

    )

    def __init__(self) -> None:
        self.screen = None
        self.isopen = True
        self.pos = None
        self.goal = None
        self.all_pos = []

        self.screen_dim = 500
        self.bound = 15.200000000000003 #15.2
        self.scale = self.screen_dim / (self.bound * 2)
        self.offset = self.screen_dim // 2

        self.goal_type = 4 #['1','2'.'3','4']


    def check_intersection(self, new_pos):
        for wall in self.walls:
            try:
                intersection = get_intersect(wall[0], wall[1], self.pos, new_pos)
            except:
                intersection = get_intersect(wall[0], wall[1], new_pos, new_pos)
            if intersection is not None:
                new_pos = self.pos
        return new_pos, intersection

        
    # hack reward function for Fetch which allows us to pass in different threshold values
    def compute_reward(self, achieved_goal, goal, info=None):
        threshold=1.
        # Compute distance between goal and the achieved goal.
        assert achieved_goal.shape == goal.shape
        d = np.linalg.norm(achieved_goal - goal, axis=-1)
        return -(d > threshold).astype(np.float32)


    def set_goal_type(self, gtype):
        self.goal_type = gtype

    def sample_point(self, ptype="s", tid=0):
        gx_ranges = [[0.70, 2.29], [0.74, 2.68], [0.70, 2.68]]
        gy_ranges = [[0.74, 5.28], [10.68, 14.30], [7.11, 8.34]]
        sx_ranges = [[20.83, 22.11], [20.17, 22.11], [20.43, 21.85]]
        sy_ranges = [[11.02, 14.41], [1.14, 4.77],  [6.91, 8.13]]

        

        if self.goal_type==4:
            s_id = np.random.choice(3, 1)[0]
            g_id = np.random.choice(3, 1)[0]
        elif self.goal_type==1:
            s_id = 0
            g_id = np.random.choice(3, 1)[0]
        elif self.goal_type==2:
            s_id = 1
            g_id = np.random.choice(3, 1)[0]
        elif self.goal_type==3:
            s_id = 2
            g_id = np.random.choice(3, 1)[0]

        sx_r = sx_ranges = sx_ranges[s_id]
        sy_r = sy_ranges = sy_ranges[s_id]
        gx_r = gx_ranges = gx_ranges[g_id]
        gy_r = gy_ranges = gy_ranges[g_id]

        sx = np.random.uniform(sx_r[0], sx_r[1]) - 23.2/2 # [m]
        sy = np.random.uniform(sy_r[0], sy_r[1]) - 15.2/2 # [m]
        gx = np.random.uniform(gx_r[0], gx_r[1]) - 23.2/2 # [m]
        gy = np.random.uniform(gy_r[0], gy_r[1]) - 15.2/2 # [m]

        #print(sx, sy, gx, gy)

        if ptype=='s':
            #print(ptype)            
            pos = np.array([sx, sy])
        else:
            #print(ptype)            
            pos = np.array([gx, gy])

        #print(pos,)
        #print(pos, sx, sy, gx, gy)
        #if inters is not None:
        #    self.sample_point(ptype=ptype)
        #else:
        return pos

    '''
    def sample_point(self, ptype="s", tid=0):
        pos, inters = self.check_intersection( np.random.uniform(low=-11, high=11.1, size=(2,)))

        sx = np.random.uniform(0.2, 10.5) - 23.2/2 # [m]
        sy = np.random.uniform(0.2, 5.5) - 15.2/2 # [m]

        if inters is not None:
            self.sample_point()
        else:
            return pos
    '''

    def step(self, action: np.ndarray) -> Tuple[np.ndarray, float, bool, Dict]:
        action = action
        new_pos, __ = self.check_intersection(self.pos + action)
        
        self.pos = new_pos
        self.all_pos.append(self.pos.copy())

        r = self.compute_reward(self.pos, self.goal)
        done = (r==0)
        obs = {'observation':self.pos.copy(), 'achieved_goal':self.pos.copy(),'desired_goal':self.goal.copy()}
        return obs, r, False, {'ag':self.pos.copy(), 'g':self.goal.copy(), 'd':done, 'is_success':done}

        #return self.pos.copy(), 0, done, [self.all_pos.copy(), self.goal]

    def hard_set_pos(self, pos):
        new_pos, __ = self.check_intersection(pos)        
        self.pos = pos
        self.all_pos.append(self.pos.copy())


    def reset(self, refresh=True) -> np.ndarray:
        if refresh:
            self.all_pos = []
        self.pos = None
        self.pos = self.sample_point(ptype='s')#np.zeros(2)
        self.goal = self.sample_point(ptype='g') #+ np.random.uniform(low=-10, high=10., size=(2,)), 0, 24)
        self.all_pos.append(self.pos.copy())
        return {'observation':self.pos.copy(), 'achieved_goal':self.pos.copy(),'desired_goal':self.goal.copy()}

    def render(self, mode: str = "human"):
        scale = self.scale
        offset = self.offset
        screen_dim = self.screen_dim
        bound = self.bound

        if self.screen is None:
            pygame.init()
            try:
                pygame.display.list_modes()
            except:
                import os

                os.environ["SDL_VIDEODRIVER"] = "dummy"

            self.screen = pygame.display.set_mode((screen_dim, screen_dim))
        self.surf = pygame.Surface((screen_dim, screen_dim))
        self.surf.fill(BLACK)
        for pos in self.all_pos:
            x, y = pos * scale + offset
            gfxdraw.filled_circle(self.surf, int(x), int(y), 4, RED)

        x, y = self.goal * scale + offset
        gfxdraw.filled_circle(self.surf, int(x), int(y), 5, YELLOW)

        for wall in self.walls:
            x1, y1 = wall[0] * scale + offset
            x2, y2 = wall[1] * scale + offset
            gfxdraw.line(self.surf, int(x1), int(y1), int(x2), int(y2), WHITE)

        self.surf = pygame.transform.flip(self.surf, False, True)#(self.surf, flip_x=False, flip_y=True)
        self.screen.blit(self.surf, (0, 0))
        if mode == "human":
            pygame.display.flip()
        elif mode == "rgb_array":
            return np.transpose(np.array(pygame.surfarray.pixels3d(self.screen)), axes=(1, 0, 2))
        else:
            return self.isopen

    def close(self):
        if self.screen is not None:
            pygame.quit()
            self.isopen = False
